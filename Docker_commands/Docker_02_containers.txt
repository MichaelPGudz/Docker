------------
> docker version --> listing details regarding docker and docker server
> docker info --> lists docker informations i.e. how many containers/images exist and run/stop

------------
#Creating containers
> docker container run --publish 80:80 nginx --> starting nginx container with logs attached in the terminal
> docker container run --publish -d (or --detach) 80:80 nginx --> starting nginx container with logs attached in the terminal
> docker container run --publish 8080:80 --name webhost -d ngingx:1.11 nginx -T --> 8080:80 -- changing host listetning port ngingx:1.11 -- setting image version -T -- changing CMD to run on start
> docker container run -p 3306:3306 -d --name db -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql --> starting container 

#Viewing containers
> docker container ls --> lists all running containers 
> docker container ls -a --> lists all containers (working/stopped)

#Stoping container
> docker container stop moby_dock --> stops the container

> docker cntainer logs moby_dock --> shows all logs for running moby_dock container
> docker container top moby_dock --> shows stats for moby_dock container 

#Deleting containers
> docker container rm moby_dock --> deletes moby_dock container (end every other typed after moby_dock)/(add -f or --force to force delete if running) 

------------
#Show stats/logs
> docker container top moby_dock --> shows stats for moby_dock container 
> docker container inspect moby_dock --> outputs json's array 
> docker container stats --> highlights all the statistics for running containers

------------
#Interactive run
> docker container run -it --> start new container interactively (-i -- keeps session open, -t -- simulates a real terminal)
> docker container exec -it -->

> docker container run -it --name container_name nginx bash --> (bash -- opens a terminal to type commands from inside a container)
> docker container run -it --name ubuntu ubuntu --> no need to type bash, because its default CMD is bash 
$ apt-get update
$ apt-get install -y curl
> docker container run -it alpine sh --> running alpine

#Starting interactive container
> docker container start -ai ubuntu --> re-running the ubuntu container

#Running shell in a running container (MySQL or Nginx)
> docker container exec -it mysql bash --> running bash in mysql container 
$ apt-get update && apt-get install -y procps

#Pulling docker image
> docker pull alpine --> docker pulls Linux alpine image from docker hub

------------
#Networking
> docker container port webhost --> shows occupied ports  
> docker container inspect --format "{{ .NetworkSettings.IPAddress }}" webhost --> draws the ipaddress from inspect for the container webhost

#Docker Network commands
> docker network ls --> show networks
> docker network inspect --> inspect a network
> docker network create --driver --> create a network (--driver - built-in or 3rd party extensions that give you virtaul network features)
> docker network connect --> attach a network to container, dynamically creates a NIC in a container on an existing virtaul network
> docker network disconnect --> detach a network from a container, dynamically removes a NIC from a container on a specific virtaul network

> docker network create my_app_net --name new_webhost --network my_app_net nginx --> specifying network

#Connecting and disconnecting containers to specific networks 
> docker network connect my_app_net webhost --> 1st network name, 2nd container name
> docker network connect my_app_net webhost --> 1st network name, 2nd container name

#Installing ping  in nginx containers
> docker container exec -it my_nginx bash
$apt-get update
$apt-get install -y inetutils-ping
> docker container exec -it new_nginx bash
$apt-get update
$apt-get install -y inetutils-ping

#Pinging inside containers
> docker container exec -it my_nginx ping new_nginx